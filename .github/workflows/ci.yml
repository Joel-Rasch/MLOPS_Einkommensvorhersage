### Continuous Integration: Testet Code, speichert Modelle & Ã¼berwacht mit Prometheus

name: CI Pipeline

on:
  push:
    branches:
      - DEV
  pull_request:
    branches:
      - DEV
      - UAT

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Install Linting Dependencies
        run: |
          pip install flake8 black
      
      - name: Run Flake8
        run: |
          flake8 .
      
      - name: Run Black
        run: |
          black --check .

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Install Dependencies
        run: |
          pip install -r backend/requirements.txt
      
      - name: Run Backend Tests
        run: |
          pytest backend/tests/

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Install Dependencies
        run: |
          pip install -r frontend/requirements.txt
      
      - name: Run Frontend Tests
        run: |
          pytest frontend/tests/

  train-model:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Train Model & Log to MLflow
        run: |
          python mlflow/mlflow_setup.py

  monitor-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Send CI Metrics to Grafana Cloud
        run: |
          curl -X POST https://api.grafana.com/api/metrics --user "${{ secrets.GRAFANA_CLOUD_USER }}:${{ secrets.GRAFANA_CLOUD_API_KEY }}" --header "Content-Type: application/json" --data '{"pipeline": "CI", "status": "${{ job.status }}", "timestamp": "${{ github.run_id }}"}'